#pragma once

#include <iostream>
#include <vector>


struct Coords
{
    // Struct for storing coordinates on a hexagonal grid. It stores axial coordinates.
    // The struct allows for easy conversion to cube coordinates.
    // +x = 0 deg, +y = 120 deg, +z = 240 deg
    
    int r; // row
    int q; // collumn

    Coords() {; }
    Coords(int _r, int _q): r(_r), q(_q) {; }

    const int x() const {return r; } // x from cube coords
    const int y() const {return q; } // y from cube coords
    const int z() const {return -r -q; } // z from cube coords
    void print() {std::cout << "(" << r << ", " << q << ", " << -r -q << ") " << std::endl; }

    Coords getNeighbour(int direction);
};

int modulo(int a, int b);

template <typename T>
T& atCoords(std::vector< std::vector<T> >& data, Coords coords)
{
    return data[coords.r][modulo(coords.q, data[coords.r].size())];
}

inline bool operator< (const Coords& a, const Coords& b);
inline bool operator> (const Coords& a, const Coords& b) {return b < a; }
inline bool operator<=(const Coords& a, const Coords& b) {return !(a > b); }
inline bool operator>=(const Coords& a, const Coords& b) {return !(a < b); }

inline bool operator==(const Coords& a, const Coords& b) {return a.r == b.r && a.q == b.q; }
inline bool operator!=(const Coords& a, const Coords& b) {return !(a == b); }

bool inBounds(const Coords& a, int width, int height);

int distance(const Coords& a, const Coords& b);

int randomI(int min, int max);
