#include "board.hpp"


Board::Board(std::shared_ptr<BoardSettings>& bSetts):
    m_bSetts(bSetts)
{
    m_data = std::vector< std::vector<int> >(m_bSetts->dimensions.x,
					     std::vector<int>(m_bSetts->dimensions.y, -2));

    for(int r = 0; r < m_bSetts->dimensions.x; ++r)
    {
	for(int q = 0; q < m_bSetts->dimensions.y; ++q)
	{
	    std::vector<sf::Vector2f> curr;
	    if(r + q/2 < m_bSetts->dimensions.x)
	    {
	        curr.emplace_back((int)std::round((r + q * 0.5    ) * m_bSetts->tileSize.x),
				   q    * m_bSetts->tileSize.y);
	        curr.emplace_back((int)std::round((r + q * 0.5 + 1) * m_bSetts->tileSize.x-1),
				   q    * m_bSetts->tileSize.y);
	        curr.emplace_back((int)std::round((r + q * 0.5 + 1) * m_bSetts->tileSize.x-1),
				  (q+1) * m_bSetts->tileSize.y-1);
	        curr.emplace_back((int)std::round((r + q * 0.5    ) * m_bSetts->tileSize.x),
				  (q+1) * m_bSetts->tileSize.y-1);
	    }
	    else
	    {
	        curr.emplace_back(
		       (int)std::round((r+q*0.5f   - m_bSetts->dimensions.x) * m_bSetts->tileSize.x),
		        q    * m_bSetts->tileSize.y);
	        curr.emplace_back(
		       (int)std::round((r+q*0.5f+1 - m_bSetts->dimensions.x) * m_bSetts->tileSize.x-1),
		        q    * m_bSetts->tileSize.y);
	        curr.emplace_back(
		       (int)std::round((r+q*0.5f+1 - m_bSetts->dimensions.x) * m_bSetts->tileSize.x-1),
		       (q+1) * m_bSetts->tileSize.y-1);
	        curr.emplace_back(
		       (int)std::round((r+q*0.5    - m_bSetts->dimensions.x) * m_bSetts->tileSize.x),
		       (q+1) * m_bSetts->tileSize.y-1);
	    }

	    for(int i = 0; i < 4; ++i)
	    {
		m_depiction.emplace_back(curr[i], m_bSetts->deadColor);
	    }
	}
    }
}

void Board::update()
{
    for(int i = 0; i < m_toRecolor.size(); ++i)
    {
	int index = (m_toRecolor[i].r * m_bSetts->dimensions.y + m_toRecolor[i].q)*4;
	for(int j = 0; j < 4; ++j)
	{
	    m_depiction[index + j].color = m_growthColors[atCoords(m_data, m_toRecolor[i])];
	}
    }
    
    m_toRecolor = m_toUpdate;
	
    for(int i = 0; i < m_toUpdate.size(); ++i)
    {
	int index = (m_toUpdate[i].r * m_bSetts->dimensions.y + m_toUpdate[i].q)*4;
	for(int j = 0; j < 4; ++j)
	{
	    m_depiction[index + j].color = m_bSetts->activeColor;
	}
    }
}

bool Board::change(Coords at, int newGrowth)
{
    if(inBounds(at, m_bSetts->dimensions.x, m_bSetts->dimensions.y))
    {
	atCoords(m_data, at) = newGrowth;
	m_toUpdate.emplace_back(at);
	return true;
    }
    
    return false;
}

void Board::tick()
{
    update();
}

void Board::draw(sf::RenderTarget& target)
{
    target.draw(&m_depiction[0], m_depiction.size(), sf::Quads);
}
